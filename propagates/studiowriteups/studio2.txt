Studio 2 write up

Your TA's name:



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1.
2.
3.
4.
5.
6.

Below each question, type in your short, to-the-point answers.

Part A

What do you see in the plots for ticks and time?
	They are both growing exponentially.

How would you characterize those curves?
	As exponential curves 

Based on the current code for addLast, why do you see this behavior?
	The computer has to parse through the entire linkedlist when finding the end to add an integer, so as the list grows bigger the computer spends more and more time parsing the list between each addition.

Part B

What behavior do you see now for appending n items to a list if you use a tail reference?
	The time alternates between 0 and 1 due to the speed of the computer's CPU

While we have reasoned so far only about time, if we are adding n elements to the end of a list, what is the asymptotic complexity of the additional space required when using the tail reference?
	The work has a linear complexity 
	
Under what conditions would you recommend using a linked list with a tail reference vs. a linked list without a tail reference?
	The tail reference makes adding a single element quicker and easier. 

Part C

Why does getSize() take the time it does?
	It has to run through the entire linkedlist to get the size, so the bigger the list, the longer it takes.

How did you achieve Î˜(1) performance for getSize()?
	By creating a global variable that stores the size of linkedlist and having getSize() return that variable instead.
